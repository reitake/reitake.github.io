<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Go语言学习笔记]]></title>
    <url>%2F2019%2F03%2F07%2FGolang-Note%2F</url>
    <content type="text"><![CDATA[声明变量单变量声明123456789//声明类型，另行赋值var v_name v_typev_name = dfsf//声明值，自动判定类型var v_name = value//省略var，使用：=v_name := value 多变量声明123456789101112131415//声明同个类型，非全局变量var vname1, vname2, vname3 v_typevname1, vname2, vname3 = v1, v2, v3//声明值，自动判断类型var vname1, vname2, vname3 = v1, v2, v3//使用:=，只能在函数体中使用vname1, vmame2, vname3 := v1, v2, v3//一般用于全局变量声明var( vname1 v_type1 vname2 v_type2) 数组唯一类型，长度固定的序列。 单维数组声明1234//指定元素类型及个数var arr_name [SIZE] arr_type//eg.var arr [10] float32 初始化数组：12345678//声明时赋值，&#123;&#125;数据量不能大于[]var arr = [5]float32&#123;1.0, 2.2, 4.0, 5.5, 6.0&#125;//[]不设大小，自动判断数组大小var arr = [...]float32&#123;1.0, 2.2, 4.0, 5.5, 6.0&#125;//声明后单独赋值arr[4] = 6.0 多维数组123var arr_name [SIZE1][SIZE2]...[SIZEN] arr_type//eg.var arr3[5][10][4]int 二维数组初始化：123456a = [3][4]int&#123; &#123;0, 1, 2, 3&#125; , /* 第一行索引为 0 */ &#123;4, 5, 6, 7&#125; , /* 第二行索引为 1 */ &#123;8, 9, 10, 11&#125;, /* 第三行索引为 2 */&#125;//必须有逗号 切片切片声明1234567//声明类型，省略大小var slice_name []type//用make()创建切片var slice_name [] = make([]type, len)//也可简写成slice_name := make([]type, len, capacity) //capacity为可选参数 切片初始化：12345//直接:=声明+初始化s := []int&#123;1,2,3&#125; // cap = len = 3//用数组初始化切片s := arr[:] // s := arr[startIndex:endIndex] 空(nil)切片：一个切片在未初始化之前默认为 nil，长度为 0。1234var s []intif(s == nil)&#123; ...&#125; 指针指针声明1234var p_name *p_type//eg.var ip *intvar fp *float32 指针使用：123456var a int = 20var ip *intip = &amp;afmt.Printf("a 变量的地址是: %x\n", &amp;a)fmt.Printf("ip 变量储存的指针地址: %x\n", ip ) /* 指针变量的存储地址 */fmt.Printf("*ip 变量的值: %d\n", *ip ) /* 使用指针访问值 */ 空指针：123456var ptr *intfmt.Printf("ptr的值为 ： %x\n"), ptr) /* 空指针的值为零 *///控指针的判断：if(ptr != nil) /* ptr 不是空指针 */if(ptr == nil) /* ptr 是空指针 */ 数组指针：12345678910111213141516171819 package mainimport "fmt"const MAX int = 3func main() &#123; a := []int&#123;10,100,200&#125; var i int var ptr [MAX]*int; for i = 0; i &lt; MAX; i++ &#123; ptr[i] = &amp;a[i] /* 整数地址赋值给指针数组 */ &#125; for i = 0; i &lt; MAX; i++ &#123; fmt.Printf("a[%d] = %d\n", i,*ptr[i] ) &#125;&#125; 输出结果：123a[0] = 10a[1] = 100a[2] = 200 结构体一系列相同或不同类型的数据结构构成的集合。 定义结构体：12345678910111213141516//定义结构体type struct_variable_type struct&#123; key1 type; key2 type; ... keyN type;&#125;//用结构体声明变量struct_name := struct_variable_type &#123;value1, value2...,valueN&#125;struct_name_name2 := struct_variable_type&#123;key1: value1, key2: value2..., keyN: valueN&#125;//访问结构体成员结构体.成员名//结构体名struct_name可以作为函数参数 结构体指针：123456//定义指向结构体的指针var struct_pointer *struct_variable_typestruct_pointer = &amp;struct_name//使用指针访问成员struct_pointer.keyN Map(集合)一种无序的键值的集合。可以迭代，不返回顺序。通过key来快速检索。12345678910111213141516171819202122232425//变量声明，不初始化的话，默认map是nil，nil map不能用来存放键值var map_variable map[key_data_type]value_data_type//或使用makemap_variable := make(map[key_data_type]value_data_type)//eg.var countryCapitalMap map[string]string //创建countryCapitalMap = make(map[string]string)countryCapitalMap["France"] = "Paris" //map插入key - value对countryCapitalMap["Italy"] = "罗马"countryCapitalMap["Japan"] = "东京"countryCapitalMap["India "] = "新德里"/* 遍历输出 */for country := range countryCapitalMap &#123; fmt.Println(country, "首都是", countryCapitalMap[country])&#125;/* 查看元素在map中是否存在 */capital, ok := countryCapitalMap["美国"] //存在ok=true，不存在ok=falsefmt.Println(capital)fmt.Println(ok)if ok &#123; fmt.Println("美国的首都是", capital)&#125; else &#123; fmt.Println("美国的首都不存在")&#125; Map的基本操作delete()函数删除Map的元素，参数为key。1delete(countryCapitalMap, "France")]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F03%2F07%2FHello-World%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
